// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: comapi-service.proto

package protobuffer_def

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/any"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ComApiServer service

func NewComApiServerEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ComApiServer service

type ComApiServerService interface {
	BaseInterface(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error)
}

type comApiServerService struct {
	c    client.Client
	name string
}

func NewComApiServerService(name string, c client.Client) ComApiServerService {
	return &comApiServerService{
		c:    c,
		name: name,
	}
}

func (c *comApiServerService) BaseInterface(ctx context.Context, in *BaseRequest, opts ...client.CallOption) (*BaseResponse, error) {
	req := c.c.NewRequest(c.name, "ComApiServer.BaseInterface", in)
	out := new(BaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ComApiServer service

type ComApiServerHandler interface {
	BaseInterface(context.Context, *BaseRequest, *BaseResponse) error
}

func RegisterComApiServerHandler(s server.Server, hdlr ComApiServerHandler, opts ...server.HandlerOption) error {
	type comApiServer interface {
		BaseInterface(ctx context.Context, in *BaseRequest, out *BaseResponse) error
	}
	type ComApiServer struct {
		comApiServer
	}
	h := &comApiServerHandler{hdlr}
	return s.Handle(s.NewHandler(&ComApiServer{h}, opts...))
}

type comApiServerHandler struct {
	ComApiServerHandler
}

func (h *comApiServerHandler) BaseInterface(ctx context.Context, in *BaseRequest, out *BaseResponse) error {
	return h.ComApiServerHandler.BaseInterface(ctx, in, out)
}
